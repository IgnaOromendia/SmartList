TAD Product ES Tupla⟨name: String, amount: Nat, pirce: Nat⟩

Representación:
	sl se representa con estr donde 
		estr es tupla ⟨	homeLists: diccHash(string,⟨list: diccHash(string,Product), price: nat⟩), // otra posibilidad podria ser un spalytree
						buyLists: diccHash(string,⟨list: diccHash(string,Product), price: nat⟩),  // la clave del segundo dic son los nombres de los prodctos
						urgentes: conjHash(string)
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)
		donde: 
		(1)	≡	claves(e.homeLists) ∩ claves(e.buyLists) = ø
---
Función de abstracción:
	Abs:	estr	->	sl	{Rep(e)}
	(∀e: estr) Abs(e) =obs sl: sl | (1)∧(2)∧(3)∧(4)∧(5)
		donde: 
		(1)	≡	buyLists(sl) = sl.buyLists
		(2)	≡	homeLists(sl) = sl.homeLists
		(3) ≡ 	buyList(id,sl) = obtener(id,sl.buyLists).list
		(4) ≡ 	homeList(id,sl) = obtener(id,sl.homeList).list
		(5) ≡ 	listPrice(id,sl) = obtener(id,sl.buyLists).price
---
Interfaz:
	Parámetros formales:
		Géneros:	α
		Función:
			Copiar(in a:α) -> res: α
			Pre ≡ {true}
			Post ≡ {res = a} 
			Complejidad: Θ(copy(a))
			Descripción: Función copia de α's.
			---
	Se explica con:	TipoDato
	Géneros:		sl
	
	Operaciones básicas:
		buyLists(in sl: sl)	-> res: dicc(string,⟨list: conj(Product), price: nat⟩)
		Pre ≡ {true}
		Post ≡ {res =obs buyLists(sl)}
		Complejidad: Θ(1)
		Descripción: Devuelve todas las listas para comprar
		Aliasing: Devuelve una referencia no modificable
		---		
		homeLists(in sl: sl) -> res: dicc(string,⟨list: conj(Product), price: nat⟩)
		Pre ≡ {true}
		Post ≡ {res =obs homeLists(sl)}
		Complejidad: Θ(1)
		Descripción: Devuelve todas las listas que contiene los productos que hay en casa
		Aliasing: Devuelve una referencia no modificable
		---		
		buyList(in id: string, in sl: sl) -> res: conj(Product)
		Pre ≡ {id ∈ claves(sl.buyLists)}
		Post ≡ {res =obs buyList(id,sl)}
		Complejidad: Θ(1)
		Descripción: Devuelve la lista buscada.
		Aliasing: Devuelve una referencia no modificable
		---	
		homeList(in id: string, in sl: sl) -> res: conj(Product)
		Pre ≡ {id ∈ claves(sl.homeLists)}
		Post ≡ {res =obs homeList(id,sl)}
		Complejidad: Θ(1)
		Descripción: Devuelve la lista buscada.
		Aliasing: Devuelve una referencia no modificable
		---	
		listPrice(in id: string, in sl: sl) -> res: nat
		Pre ≡ {id ∈ claves(sl.buyLists)}
		Post ≡ {res =obs listPrice(id,sl)}
		Complejidad: Θ(1)
		Descripción: Devuelve el precio de la lista buscada.
		Aliasing: Devuelve una referencia no modificable
		---	
		urgentes(in sl: sl) -> res: conj(string)
		Pre ≡ {True}
		Post ≡ {res =obs urgentes(sl)}
		Complejidad: Θ(1)
		Descripción: Devuelve un conjunto con todos los id que son urgentes
		Aliasing: Devuelve una referencia no modificable
		---	
		newSession() -> res: sl
		Pre ≡ {True}
		Post ≡ {res =obs newSession()}
		Complejidad: Θ(1)
		Descripción: Genera una nueva sesión de la app
		Aliasing: No presenta aspectos de aliasing.
		---		
		newList(in id: string, in t:string, inout sl:sl)
		Pre ≡ {(t = "buy" ∧ id ∉ claves(sl.buyList) ∨ (t = "home" ∧ id ∉ claves(sl.homeLists)}
		Post ≡ {res =obs newList(id,t,sl)}
		Complejidad: Θ(1)
		Descripción: Genera una nueva lista y la agrega donde corresponda.
		Aliasing: No presenta aspectos de aliasing.
		---	
		newProduct(in p: product, in id:string, inout sl:sl)
		Pre ≡ {id ∈ claves(sl.homeLists) ∨ id ∈ claves(sl.buyLists)}
		Post ≡ {res =obs addProduct(p,id,sl)}
		Complejidad: Θ(1)
		Descripción: Agrega un producto a la lista correspondiente
		Aliasing: No presenta aspectos de aliasing.
		---		
		buyProduct(in p: product, in id:string, inout sl:sl)
		Pre ≡ {id ∈ claves(sl.buyLists)}
		Post ≡ {res =obs buyProduct(p,id,sl)}
		Complejidad: Θ(1)
		Descripción: Agrega un producto a la lista correspondiente
		Aliasing: No presenta aspectos de aliasing.
		---	
		hacerUrgente(in id:string, inout sl:sl)
		Pre ≡ {id ∈ claves(sl.buyLists)}
		Post ≡ {res =obs hacerUrgente(id,sl)}
		Complejidad: Θ(1)
		Descripción: Hace/Desache una lista urgente
		Aliasing: No presenta aspectos de aliasing.
		---		
	Algoritmos del módulo:
		iBuyLists(in sl: sl) -> res: dicc(string,⟨list: conj(Product), price: nat⟩)
			res ← sl.buyLists
		---
		iHomeLists(in sl: sl) -> res: dicc(string,⟨list: conj(Product), price: nat⟩)
			res ← sl.homeLists
		---
		iBuyList(in id: string, in sl:sl) -> res: conj(Product) 
			res ← significado(id,sl.buyLists).list
		---
		iHomeList(in id: string, in sl:sl) -> res: conj(Product) 
			res ← significado(id,sl.homeLists).list
		---
		iListPrice(in id: string, in sl:sl) -> res: nat
			res ← significado(id,sl.homeLists).price
		---
		iNewSession() -> res: sl
			res.homeLists ← vacio()
			res.buyLists ← vacio()
		---
		iNewList(in id: string, in t:string, in sl:sl)
			if (t = "buy" ∧ def?(id,sl.buyLists) = False) then
				definir(id,vacia(),sl.buyLists)
			else if (t = "home" ∧ def?(id,sl.homeLists) = False) then
				definir(id,vacia(),sl.homeLists)
			fi
		---
		iNewProduct(in p: product, in id:string, inout sl:sl)
			⟨ diccHash(string,Product), nat⟩ listData ← (vacio(),0)
			
			if (def?(id,sl.buyLists)) then
				listData ← obtener(id,sl.buyLists)
			else if (def?(id,sl.homeLists)) then
				listData ← obtener(id,sl.homeLists)
			fi
			
			listData.price += p.amount * p.price
			
			if (def?(p.name,list)) then
				product prod ← obtener(p.name,listData.list)
				prod.amount += p.amount
				definir(prod.name,p,listData.list)
			else
				definir(p.name,p,listData.list)
			fi
			
			if (def?(id,sl.buyLists)) then
				definir(id,listData,sl.buyLists)
			else if (def?(id,sl.homeLists)) then
				definir(id,listData,sl.homeLists)
			fi
			
		---
		iBuyProduct(in p: product, in idB:string, in idH: String, inout sl:sl)
			⟨ diccHash(string,Product), nat⟩ listData ← obtener(idB,sl.buyLists)
			
			listData.price -= p.amount * p.price
			
			product prod ← obtener(p.name,listData.list)
			prod.amount -= p.amount
			
			if prod.amount = 0 then
				eliminar(p.name,listData.list)
			else
				definir(prod.name,prod,listData.list)
			fi
			
			definir(idB,listData,sl.buyLists)
			
			listData ← obtener(idH,sl.homeLists)
			listData.price += p.amount * p.price
			
			if (def?(p.name,list)) then
				prod ← obtener(p.name,listData.list)
				prod.amount += p.amount
				definir(prod.name,p,listData.list)
			else
				definir(p.name,p,listData.list)
			fi
			
			definir(idH,listData,sl.homeLists)
		---
		iHacerUrgente(in id: string, in sl:sl)
			if (pertenece?(id,sl.urgentes)) then
				eliminar(id,sl.urgentes)
			else
				agregar(id,sl.urgentes)
			fi
		---
		
		
		
		
